<project name="DataVision" default="all_plus_jar" basedir=".">
  <property name="src" location="."/>
  <property name="lib" location="lib"/>
  <property name="build" location="classes"/>
  <property name="dist" location="dist"/>
  <property name="docs" location="docs"/>
  <property name="javadoc.dir" location="javadoc"/>
  <property name="overview.html" location="jimm/overview.html"/>
  <property name="tmp" location="${java.io.tmpdir}"/>
  <property name="jarfile" value="DataVision.jar"/>
  <property name="xlateomatic.jarfile" value="TranslateOMatic.jar"/>
  <property name="images.dir" location="${build}/images"/>
  <property name="images.sourcedir" location="images"/>
  <property name="manifest" location="jimm/Manifest"/>
  <property name="properties.dir" location="jimm/properties"/>
  <property name="main-class" value="jimm.datavision.DataVision"/>

  <property name="web.dir" location="${docs}/web"/>
  <property name="web.htdocs" location="${web.dir}/htdocs"/>
  <property name="web.version.file" location="${web.htdocs}/version.txt"/>
  <property name="web.archive" value="datavision-web.tar.gz"/>

  <property name="debug.xmlfile" value="postgresql.xml"/>

  <property name="testclass" value="AllTests"/>
  <property name="testargs" value=""/>

  <property name="db.driver"
	location="/usr/local/lib/postgresql.jdbc.jar" />
  <property name="junit.jar" location="${lib}/junit.jar"/>

  <property name="test.data.gen.schema" location="${tmp}/schema.sql"/>
  <property name="test.data.gen.load" location="${tmp}/load.sql"/>
  <property name="test.data.gen.userid" value="jimm"/>
  <property name="test.data.gen.password" value=""/>

  <property name="ftp.tmpfile" location="${tmp}/dv_fp_tempfile"/>
  <property name="sf.user" value="jmenard"/>
  <property name="sf.host" value="datavision.sf.net"/>

  <!-- ================ classpaths ================ -->

  <path id="compile.classpath">
    <pathelement location="${build}"/>
    <fileset dir="${lib}" excludes="**/DataVision.jar,**/version_info.txt"/>
  </path>

  <path id="run.classpath">
    <path refid="compile.classpath"/>
    <pathelement location="${db.driver}"/>
  </path>

  <path id="test.compile.classpath">
    <path refid="compile.classpath"/>
    <pathelement location="${junit.jar}"/>
  </path>

  <path id="test.run.classpath">
    <path refid="run.classpath"/>
    <pathelement location="${junit.jar}"/>
  </path>

  <path id="test.data.gen.classpath">
    <path refid="run.classpath"/>
  </path>

  <path id="javadoc.classpath">
    <pathelement location="${build}"/>
    <path refid="test.compile.classpath"/>
  </path>

  <!-- ================ initialization ================ -->

  <target name="timestamp">
    <tstamp/>
  </target>

  <target name="init" depends="timestamp">
    <mkdir dir="${build}"/>
    <mkdir dir="${images.dir}"/>
  </target>

  <target name="init-javadoc" depends="timestamp">
    <mkdir dir="${javadoc.dir}"/>
  </target>

  <!-- ================ building ================ -->

  <target name="all" depends="help.html, compile"
	description="builds the application, but doesn't create the jar file"/>

  <target name="all_plus_jar" depends="clean, all, jar"
  description="builds the application, and additionally creates the jar file"/>

  <!-- Compile everything except tests -->
  <target name="compile" depends="init, images, properties">
    <javac source="1.4" target="1.4" srcdir="${src}" destdir="${build}"
     debug="true" debuglevel="lines,vars,source"
     includes="jimm/**" deprecation="true"
     excludes="jimm/datavision/test/**,jimm/datavision/testdata/**,jimm/properties/**">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <!-- ================ documentation ================ -->

  <!-- Define a task that creates XHTML from the doc files in a directory. -->
  <macrodef name="doc2xhtml">
    <attribute name="name"/>
    <attribute name="todir"/>
    <sequential>
      <delete dir="@{todir}" failonerror="false"/>
      <exec executable="ruby">
	<arg line="${docs}/doc2xhtml.rb ${docs}/xhtml/@{name} @{todir}"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- Define a task that creates HTML from the XHTML generated by -->
  <!-- doc2xhtml. -->
  <macrodef name="xhtml2html">
    <attribute name="fromdir"/>
    <attribute name="todir"/>
    <sequential>
      <delete dir="@{todir}" failonerror="false"/>
      <exec executable="ruby">
	<arg line="${docs}/xhtml2html.rb @{fromdir} @{todir}"/>
      </exec>
      <copy file="${docs}/style.css" todir="@{todir}"/>
    </sequential>
  </macrodef>

  <!-- Generate HTML for Swing help window -->
  <target name="help.html" depends="help.html.dv, help.html.faq"
	description="generate HTML for in-program Swing HTML help widget">
  </target>

  <!-- Define a task that generates Swing-friendly HTML -->
  <macrodef name="help.html.generate">
    <attribute name="name"/>
    <sequential>
      <doc2xhtml name="@{name}" todir="${docs}/tmp_@{name}"/>
      <xhtml2html fromdir="${docs}/tmp_@{name}" todir="${docs}/@{name}"/>
      <delete dir="${docs}/tmp_@{name}"/>
    </sequential>
  </macrodef>

  <!-- Define a task that sees if HTML generation is needed -->
  <macrodef name="check.gen.needed">
    <attribute name="name"/>
    <sequential>
      <uptodate property="@{name}-gen.not-required"
	    targetfile="${docs}/@{name}/@{name}.html">
	<srcfiles dir="${docs}/xhtml/@{name}" includes="**/*.html"/>
	<srcfiles dir="${docs}" includes="style.css"/>
      </uptodate>
    </sequential>
  </macrodef>

  <check.gen.needed name="DataVision"/>
  <check.gen.needed name="faq"/>

  <target name="help.html.dv" unless="DataVision-gen.not-required">
    <help.html.generate name="DataVision"/>
  </target>

  <target name="help.html.faq" unless="faq-gen.not-required">
    <help.html.generate name="faq"/>
  </target>

  <!-- ================ distribution ================ -->

  <target name="version">
    <exec executable="ruby" outputproperty="version">
      <arg line="bin/versionNumber.rb -n"/>
    </exec>
  </target>

  <target name="jardate">
    <tstamp>
      <format property="jardate" pattern="yyyy-MM-dd"/>
    </tstamp>
  </target>

  <target name="datavision.version.file" depends="version, jardate">
    <echo message="This is DataVision version ${version} (Created on ${jardate})${line.separator}" 
      file="${build}/datavision_version.txt"/>
  </target>

  <target name="manifest" depends="version">
    <echo file="${manifest}">Main-Class: ${main-class}
Bundle-Name: ${ant.project.name}
Bundle-Version: ${version}
</echo>
  </target>

  <!-- Build the DataVision jar file -->
  <target name="jar" depends="all, datavision.version.file, manifest">
    <jar jarfile="${lib}/${jarfile}" basedir="${build}"
	manifest="${manifest}"/>
  </target>

  <!-- Build the distribution -->
  <target name="release"
depends="all_plus_jar, clean, xlateomatic.distclean, docs.release, release.tgz, web.tgz"/>

  <target name="docs.release"
	depends="web.version.file, docs.clean, help.html, docs.clean"/>

  <target name="web.version.file" depends="version">
    <echo message="${version}" file="${web.version.file}"/>
  </target>

  <target name="release.tgz" depends="version">
    <copy todir="${tmp}/datavision-${version}">
      <fileset dir="."/>
    </copy>
    <delete>
      <fileset dir="${tmp}/datavision-${version}"
	includes="**/CVS,**/.cvsignore,**/.DS_Store,**/*~,TAGS"/>
    </delete>
    <tar basedir="${tmp}" longfile="gnu" compression="gzip"
	destfile="${tmp}/datavision-${version}.tar.gz"
	includes="datavision-${version}/**/*"/>
    <chmod file="${tmp}/datavision-${version}.tar.gz" perm="644"/>
    <delete dir="${tmp}/datavision-${version}" failonerror="false"/>
  </target>

  <target name="web.tgz" depends="web.version.file, docs.clean, javadoc">
    <doc2xhtml name="DataVision" todir="${web.htdocs}/DataVision"/>
    <doc2xhtml name="faq" todir="${web.htdocs}/faq"/>
    <copy file="${docs}/style.css" todir="${web.htdocs}/DataVision"/>
    <copy file="${docs}/style.css" todir="${web.htdocs}/faq"/>
    <exec executable="ruby" dir="${docs}">
      <arg line="./preFilter.rb ../Credits ${web.htdocs}/Credits"/>
    </exec>
    <move todir="${web.htdocs}/javadoc">
      <fileset dir="javadoc"/>
    </move>
    <exec executable="ruby" dir="${docs}">
      <arg line="./copyToWeb.rb"/>
    </exec>
    <delete dir="${tmp}/web" failonerror="false"/>
    <copy todir="${tmp}/web">
      <fileset dir="${web.dir}"/>
    </copy>
    <delete failonerror="false">
      <fileset dir="${tmp}/web"
	includes="**/CVS, **/.cvsignore, **/.DS_Store, **/*~"/>
    </delete>
    <tar basedir="${tmp}/web" destfile="${tmp}/${web.archive}"
	compression="gzip"/>
    <delete dir="${tmp}/web" failonerror="false"/>
  </target>

  <target name="release-ftp" depends="version"
	description="ftp release to upload.sf.net">
    <echo message="cd incoming${line.separator}" file="${ftp.tmpfile}"
	append="false"/>
    <echo message="bin${line.separator}" file="${ftp.tmpfile}" append="true"/>
    <echo message="put datavision-${version}.tar.gz${line.separator}"
	file="${ftp.tmpfile}" append="true"/>
    <echo message="bye${line.separator}" file="${ftp.tmpfile}" append="true"/>
    <exec executable="ftp" dir="${tmp}" input="${ftp.tmpfile}">
      <arg line="upload.sf.net"/>
    </exec>
  </target>

  <target name="web-install"
	description="upload Web site archive to sf.net and unpack it">
    <!-- Could use optional scp and sshexec Ant tasks -->
    <exec executable="scp">
      <arg line="${tmp}/${web.archive} ${sf.user}@${sf.host}:"/>
    </exec>
    <exec executable="ssh">
      <arg line="-l ${sf.user} ${sf.host}:bin/install-dv-web.sh"/>
    </exec>
  </target>

  <!-- Generate Javadocs -->
  <target name="javadoc" depends="init-javadoc, overview"
	description="create javadocs">
    <javadoc sourcepath="${src}" packagenames="jimm.*" access="package"
	classpathref="javadoc.classpath"
	destdir="${javadoc.dir}" author="true"
	use="true" windowtitle="DataVision User's Manual"
	overview="${overview.html}">
      <doctitle>DataVision User's Manual</doctitle>
    </javadoc>
  </target>

  <target name="overview" depends="help.html.dv">
    <exec executable="ruby" dir="${docs}">
      <arg line="./copyToOverview.rb"/>
    </exec>
  </target>

  <!-- Compile and run debug -->
  <target name="debug" depends="all"
	description="run DataVision on file named in property debug.xmlfile">
    <copy file="examples/${debug.xmlfile}" todir="${tmp}" overwrite="true"/>
    <java fork="yes" classname="jimm.datavision.DataVision"
	  classpathref="run.classpath">
      <arg value="${tmp}/${debug.xmlfile}"/>
    </java>
  </target>

  <target name="debug-nocopy" depends="all">
    <java fork="yes" classname="jimm.datavision.DataVision"
	  classpathref="run.classpath">
      <arg value="${tmp}/${debug.xmlfile}"/>
    </java>
  </target>

  <target name="run" depends="all">
    <java fork="yes" classname="jimm.datavision.DataVision"
	  classpathref="run.classpath"/>
  </target>

  <!-- ================ testing ================ -->

  <target name="compile.test" depends="help.html, init, images, properties">
    <javac source="1.4" target="1.4" srcdir="${src}" destdir="${build}"
     debug="true" debuglevel="lines,vars,source"
     includes="jimm/**" deprecation="true"
     excludes="jimm/datavision/testdata/**,jimm/properties/**">
      <classpath refid="test.compile.classpath"/>
    </javac>
  </target>

  <target name="test" depends="compile.test">
    <java fork="yes" classname="jimm.datavision.test.${testclass}"
	  classpathref="test.run.classpath">
      <arg line="${testargs}"/>
    </java>
  </target>

  <!-- To use this target, specify command line args using the property -->
  <!-- 'cmdline', which is undefined above but can be passed in on the -->
  <!-- Ant command line using, for example, -Dcmdline="-c ... -d ..." -->
  <target name="conntest" depends="conntest.compile">
    <java fork="yes" classname="examples.ConnectionTest"
      classpathref="run.classpath">
      <arg line="${cmdline}"/>
    </java>
  </target>

  <target name="conntest.compile" depends="init">
    <javac source="1.4" target="1.4" srcdir="${src}" destdir="${build}" deprecation="true"
      debug="true" debuglevel="lines,vars,source"
      includes="examples/ConnectionTest.java">
      <classpath refid="test.compile.classpath"/>
    </javac>
  </target>

  <!-- Copy image files into build directory -->
  <target name="images" depends="init">
    <copy todir="${images.dir}">
      <fileset dir="${images.sourcedir}"/>
    </copy>
  </target>

  <!-- Copy properties files into build directory -->
  <target name="properties" depends="init">
    <exec executable="ruby">
      <arg line="bin/copyProperties.rb"/>
    </exec>
  </target>

  <!-- ================ test data ================ -->

  <macrodef name="compile.testdata">
    <attribute name="db"/>
    <sequential>
      <javac source="1.4" target="1.4" srcdir="${src}" destdir="${build}" deprecation="true"
       debug="true" debuglevel="lines,vars,source"
       includes="jimm/datavision/testdata/*,jimm/datavision/testdata/@{db}/**">
	<classpath refid="compile.classpath"/>
      </javac>
    </sequential>
  </macrodef>

  <macrodef name="create.testdata">
    <attribute name="db"/>
    <attribute name="classname"/>
    <attribute name="url"/>
    <attribute name="driver"/>
    <sequential>
      <java fork="yes" dir="jimm/datavision/testdata/@{db}"
	classpathref="test.data.gen.classpath"
	classname="jimm.datavision.testdata.@{db}.@{classname}"
	output="${test.data.gen.schema}"/>
      <sql src="${test.data.gen.schema}" userid="${test.data.gen.userid}"
	password="${test.data.gen.password}" url="@{url}" driver="@{driver}"
	classpathref="test.data.gen.classpath"/>
    </sequential>
  </macrodef>

  <macrodef name="load.testdata">
    <attribute name="db"/>
    <attribute name="url"/>
    <attribute name="driver"/>
    <sequential>
      <java fork="yes" dir="jimm/datavision/testdata/@{db}"
	classpathref="test.data.gen.classpath"
	classname="jimm.datavision.testdata.@{db}.CreateData"
	output="${test.data.gen.load}"/>
      <sql src="${test.data.gen.load}" userid="${test.data.gen.userid}"
	password="${test.data.gen.password}" url="@{url}" driver="@{driver}"
	classpathref="test.data.gen.classpath"/>
    </sequential>
  </macrodef>

  <macrodef name="testdata">
    <attribute name="db"/>
    <attribute name="classname"/>
    <attribute name="url"/>
    <attribute name="driver"/>
    <sequential>
      <compile.testdata db="@{db}"/>
      <create.testdata db="@{db}" url="@{url}" driver="@{driver}"
	classname="@{classname}"/>
      <load.testdata db="@{db}" url="@{url}" driver="@{driver}"/>
      <antcall target="genclean"/>
    </sequential>
  </macrodef>

  <!-- For these to work, the database dv_example must already exist. -->
  <!-- For some databases such as PostgreSQL, the tables must already -->
  <!-- exist as well, otherwise the DROP TABLE statements will fail. -->
  <!-- In other words, create the database and tables manually the -->
  <!-- first time (the databases need not contain the correct columns). -->

  <target name="mysql" depends="init"
	description="populate a MySQL test database name dv_example">
    <testdata db="mysql" classname="MySQLSchemaGen"
	url="jdbc:mysql://localhost/dv_example"
	driver="com.mysql.jdbc.Driver"/>
  </target>

  <target name="postgresql" depends="init"
	description="populate a PostgreSQL test database name dv_example">
    <testdata db="postgres" classname="PostgreSQLSchemaGen"
	url="jdbc:postgresql:dv_example" driver="org.postgresql.Driver"/>
  </target>

  <!-- ================ cleaning ================ -->

  <!-- Lister's least favorite -->
  <!-- Note that previously, this target only cleaned the build and dist -->
  <!-- directories, but I felt it was more useful if it cleaned everything. -->
  <target name="clean" description="Cleans EVERYTHING up, no build artifacts remain"
    depends="distclean, genclean">
    <delete file="derby.log"/>
    <delete file="${lib}/${jarfile}" failonerror="false"/>
    <delete file="${manifest}" failonerror="false"/>
    <delete file="${build}/datavision_version.txt" failonerror="false"/>
  </target>

  <target name="docs.clean">
    <delete dir="${javadoc.dir}" failonerror="false"/>
    <delete dir="${web.dir}/htdocs/DataVision" failonerror="false"/>
    <delete dir="${web.dir}/htdocs/faq" failonerror="false"/>
    <delete dir="${web.dir}/htdocs/javadoc" failonerror="false"/>
    <delete dir="${web.dir}/htdocs/Credits" failonerror="false"/>
    <delete dir="${docs}/tmp_DataVision" failonerror="false"/>
    <delete dir="${docs}/tmp_faq" failonerror="false"/>
    <delete dir="${tmp}/web" failonerror="false"/>
  </target>

  <!-- Kryten's most favorite ever -->
  <target name="distclean"
	  depends="docs.distclean, xlateomatic.distclean">
    <delete file="${build}/${jarfile}" failonerror="false"/>
    <delete file="${build}/${xlateomatic.jarfile}" failonerror="false"/>
    <!-- This target used to depend on the clean target, but since I -->
    <!-- changed that target to clean everything, I copied what it did -->
    <!-- down to here so that this target would work as it always has. -->
    <delete dir="${build}" failonerror="false"/>
    <delete dir="${dist}" failonerror="false"/>
  </target>

  <target name="docs.distclean" depends="docs.clean">
    <delete dir="${docs}/DataVision" failonerror="false"/>
    <delete dir="${docs}/faq" failonerror="false"/>
  </target>

  <target name="xlateomatic.clean">
    <delete failonerror="false">
      <fileset dir="${properties.dir}" includes="**/*.class"/>
    </delete>
  </target>

  <target name="xlateomatic.distclean" depends="xlateomatic.clean">
    <delete file="${build}/${xlateomatic.jarfile}" failonerror="false"/>
  </target>

  <!-- Clean up after generating a test database -->
  <target name="genclean">
    <delete file="${test.data.gen.schema}" failonerror="false"/>
    <delete file="${test.data.gen.load}" failonerror="false"/>
  </target>

</project>
